import re
import numpy as np
import matplotlib.pyplot as plt
import scipy.spatial
from scipy.interpolate import RBFInterpolator
from pathlib import Path
import os
import numpy as np
from pyvista import UnstructuredGrid


def read_points(file):
    """
    修复版本：支持 OpenFOAM 多格式 points 文件
    """
    try:
        with open(file, "r") as f:
            content = f.read()

        # 匹配所有浮点数字符（支持科学计数法）
        points = re.findall(
            r"\(?\s*([-+]?\d+\.?\d*([eE][-+]?\d+)?)\s+"
            r"([-+]?\d+\.?\d*([eE][-+]?\d+)?)\s+"
            r"([-+]?\d+\.?\d*([eE][-+]?\d+)?)\s*\)?",
            content
        )

        # 提取有效坐标
        clean_points = []
        for match in points:
            x, y, z = match[0], match[2], match[4]
            clean_points.append([float(x), float(y), float(z)])

        if not clean_points:
            raise ValueError("未找到有效坐标点")

        return np.array(clean_points)

    except FileNotFoundError:
        raise FileNotFoundError(f"文件不存在: {file}")
    except Exception as e:
        raise RuntimeError(f"解析错误: {str(e)}")

def read_faces(file):
    """
    改进版本：支持 OpenFOAM 多格式面文件解析
    """
    try:
        with open(file, "r") as f:
            content = f.read()

        # 使用正则匹配所有面定义（兼容多种格式）
        face_pattern = re.compile(
            r"\b(\d+)\s*\(\s*((?:\d+\s+)*\d+)\s*\)",  # 匹配 "n(v0 v1 ... vn)"
            re.MULTILINE
        )

        # 提取所有匹配的面数据
        matches = face_pattern.findall(content)
        if not matches:
            raise ValueError("未找到有效的面数据")

        # 解析面数据
        faces = []
        for match in matches:
            n_vertices = int(match[0])  # 顶点数量（实际可能不需要）
            indices = list(map(int, match[1].split()))

            # 验证顶点数量一致性（可选）
            if len(indices) != n_vertices:
                raise ValueError(f"顶点数量声明不一致: 声明{n_vertices} 实际{len(indices)}")

            faces.append(indices)

        return faces

    except FileNotFoundError:
        raise FileNotFoundError(f"文件不存在: {file}")
    except Exception as e:
        raise RuntimeError(f"解析错误: {str(e)}")

def read_boundary(file, patch_name="BLADE"):
    """
    增强版：支持 OpenFOAM 多格式 boundary 文件解析
    """
    try:
        with open(file, "r") as f:
            content = f.read()

        # 正则匹配目标 patch 块
        pattern = re.compile(
            rf"{re.escape(patch_name)}\s*"  # 匹配 patch 名称（允许名称含特殊字符）
            r"\{\s*"
            r"(.*?)\s*"                     # 捕获块内内容（非贪婪）
            r"(?=\n\w+\s*{{|\Z)",            # 前瞻终止条件
            re.DOTALL | re.IGNORECASE
        )

        # 查找目标 patch
        match = pattern.search(content)
        if not match:
            available = re.findall(r"(\w+)\s*{", content)
            raise ValueError(f"找不到 Patch '{patch_name}', 可用 Patches: {available}")

        # 提取关键字段
        block = match.group(1)
        start_face = re.search(r"startFace\s+(\d+)\s*;", block)
        n_faces = re.search(r"nFaces\s+(\d+)\s*;", block)

        if not start_face or not n_faces:
            missing = []
            if not start_face: missing.append("startFace")
            if not n_faces: missing.append("nFaces")
            raise ValueError(f"Patch '{patch_name}' 缺失字段: {missing}")

        return {
            "startFace": int(start_face.group(1)),
            "nFaces": int(n_faces.group(1))
        }

    except FileNotFoundError:
        raise FileNotFoundError(f"文件不存在: {file}")
    except Exception as e:
        raise RuntimeError(f"解析错误: {str(e)}")

def extract_wall_patch(points, xfaces, wall_startFace, wall_nFaces):
    """提取壁面相关点及原始索引（带完整参数校验）"""

    # ----------------------------
    # 参数有效性校验
    # ----------------------------
    # 校验输入数据类型
    if not isinstance(xfaces, (list, np.ndarray)):
        raise TypeError(f"xfaces 应为 list 或 numpy.ndarray 类型，当前类型为 {type(xfaces)}")

    # 校验非负索引和正数面数
    if wall_startFace < 0:
        raise ValueError(f"起始面索引不能为负数，当前值为 {wall_startFace}")
    if wall_nFaces <= 0:
        raise ValueError(f"面数量必须为正整数，当前值为 {wall_nFaces}")

    # 校验面数据范围
    total_faces = len(xfaces)
    if total_faces == 0:
        raise ValueError("输入面数据为空")
    if (wall_startFace + wall_nFaces) > total_faces:
        raise ValueError(
            f"面切片范围越界: 起始面={wall_startFace}, 请求面数={wall_nFaces}, "
            f"总面数={total_faces}"
        )

    # ----------------------------
    # 面数据提取
    # ----------------------------
    wall_faces = xfaces[wall_startFace: wall_startFace + wall_nFaces]

    # ----------------------------
    # 顶点索引有效性验证
    # ----------------------------
    wall_indices = set()
    max_point_idx = len(points) - 1  # 最大有效索引

    for face in wall_faces:
        # 校验面的结构
        if len(face) < 3:
            raise ValueError(f"检测到非多边形面，顶点数不足3个: {face}")

        # 校验顶点索引范围
        for idx in face:
            if not (0 <= idx <= max_point_idx):
                raise IndexError(
                    f"发现无效顶点索引 {idx}，点数组长度仅为 {len(points)} "
                    f"(有效索引范围: 0-{max_point_idx})"
                )
        wall_indices.update(face)

    # ----------------------------
    # 数据提取与格式化
    # ----------------------------
    sorted_indices = sorted(wall_indices)

    try:
        # 高效处理 numpy 数组
        if isinstance(points, np.ndarray):
            wall_points = points[sorted_indices]
        # 兼容列表或其他可迭代类型
        else:
            wall_points = np.array([points[i] for i in sorted_indices])
    except IndexError as e:
        raise RuntimeError("点坐标提取失败，请确保 points 与索引一致性") from e

    return wall_points, np.array(sorted_indices)

def compute_face_normals_back(points, faces):
    """ 计算所有面的法向量（支持任意多边形面） """
    normals = np.zeros((len(points), 3))
    count = np.zeros(len(points))

    for face in faces:
        # 跳过非多边形面
        if len(face) < 3:
            continue

        # 将面分解为三角形扇形
        p0 = np.array(points[face[0]])
        for i in range(2, len(face)):
            p1 = np.array(points[face[i - 1]])
            p2 = np.array(points[face[i]])

            # 计算法向量
            vec1 = p1 - p0
            vec2 = p2 - p0
            normal = np.cross(vec1, vec2)

            # 处理退化情况
            norm = np.linalg.norm(normal)
            if norm < 1e-10:
                continue  # 跳过退化三角形

            normal /= norm

            # 累加到顶点
            for idx in [face[0], face[i - 1], face[i]]:
                if idx >= len(points):
                    raise IndexError(f"无效顶点索引 {idx}，总点数 {len(points)}")
                normals[idx] += normal
                count[idx] += 1

    # 归一化并处理未使用的点
    valid = count > 0
    normals[valid] /= np.linalg.norm(normals[valid], axis=1, keepdims=True)
    return normals

def compute_signed_sdf_back(wall_points, wall_normals, query_points):
    """ 向量化 SDF 计算 """
    tree = scipy.spatial.KDTree(wall_points)
    distances, nearest_idx = tree.query(query_points)

    vectors = query_points - wall_points[nearest_idx]
    dot_prods = np.einsum('ij,ij->i', vectors, wall_normals[nearest_idx])
    return np.sign(dot_prods) * distances


def compute_face_normals(points, faces):
    """ 计算所有面的法向量（支持任意多边形面，修正方向指向外部） """
    normals = np.zeros((len(points), 3))
    count = np.zeros(len(points))

    for face in faces:
        if len(face) < 3:
            continue

        # 将面分解为三角形扇形
        p0 = np.array(points[face[0]])
        for i in range(2, len(face)):
            p1 = np.array(points[face[i - 1]])
            p2 = np.array(points[face[i]])

            # 计算法向量（修正方向：叉乘顺序改为 vec2 × vec1）
            vec1 = p1 - p0
            vec2 = p2 - p0
            normal = np.cross(vec2, vec1)  # 关键修改：交换叉乘顺序

            norm = np.linalg.norm(normal)
            if norm < 1e-10:
                continue

            normal /= norm

            # 累加到顶点
            for idx in [face[0], face[i - 1], face[i]]:
                if idx >= len(points):
                    raise IndexError(f"无效顶点索引 {idx}，总点数 {len(points)}")
                normals[idx] += normal
                count[idx] += 1

    # 归一化
    valid = count > 0
    normals[valid] /= np.linalg.norm(normals[valid], axis=1, keepdims=True)
    return normals


def compute_signed_sdf(wall_points, wall_normals, query_points):
    """ 向量化 SDF 计算（符号方向已修正） """
    tree = scipy.spatial.KDTree(wall_points)
    distances, nearest_idx = tree.query(query_points)

    vectors = query_points - wall_points[nearest_idx]
    dot_prods = np.einsum('ij,ij->i', vectors, wall_normals[nearest_idx])

    # 确保符号约定：外部为正，内部为负
    return distances * np.sign(dot_prods)

blade_points = '/Users/southfox/Computation/openfoam/1.18e5/constant/polyMesh/points'
blade_faces = '/Users/southfox/Computation/openfoam/1.18e5/constant/polyMesh/faces'
blade_boundary = '/Users/southfox/Computation/openfoam/1.18e5/constant/polyMesh/boundary'

points = read_points(blade_points)
faces = read_faces(blade_faces)
boundary = read_boundary(blade_boundary, patch_name="BLADE")
startFace = boundary["startFace"]
nFaces = boundary["nFaces"]
wall_points, wall_indices = extract_wall_patch(
    points = points,
    xfaces = faces,
    wall_startFace = startFace,
    wall_nFaces = nFaces
)

wall_normals = compute_face_normals(points, faces)[wall_indices]



##########################################################################################



# 定义 polyMesh 文件夹路径
polyMesh_path = Path("/Users/southfox/Computation/openfoam/1.18e5//constant/polyMesh")

# ------------------------------
# 1. 读取 points 文件
# ------------------------------
points = []
with open(polyMesh_path / "points", "r") as f:
    lines = f.readlines()
    # 跳过文件头，找到 points 数据起始位置
    start = lines.index("(\n") + 1
    end = lines.index(")\n", start)
    for line in lines[start:end]:
        # 提取坐标，例如 "(0 0 0)" -> [0, 0, 0]
        coords = line.strip().strip("()").split()
        points.append([float(x) for x in coords])
points = np.array(points)  # 转换为 NumPy 数组

# ------------------------------
# 2. 读取 owner 文件，获取单元-面关系
# ------------------------------
owner = []
with open(polyMesh_path / "owner", "r") as f:
    lines = f.readlines()
    start = lines.index("(\n") + 1
    end = lines.index(")\n", start)
    owner = [int(line.strip()) for line in lines[start:end]]

# ------------------------------
# 3. 读取 faces 文件，获取面-点关系
# ------------------------------
faces = []
with open(polyMesh_path / "faces", "r") as f:
    lines = f.readlines()
    start = lines.index("(\n") + 1
    end = lines.index(")\n", start)
    face_str = "".join(lines[start:end]).replace("\n", "")
    # 解析面数据，例如 "4(0 1 2 3)" -> [0, 1, 2, 3]
    face_str = face_str.split(")")[:-1]  # 分割每个面
    for fs in face_str:
        n_points = int(fs.split("(")[0])
        pts = fs.split("(")[1].split()
        faces.append([int(p) for p in pts])

# ------------------------------
# 4. 计算每个单元的中心（近似方法）
# ------------------------------
# 统计每个单元关联的面，再统计面的所有点
cell_points = {}
for face_id, cell_id in enumerate(owner):
    if cell_id not in cell_points:
        cell_points[cell_id] = []
    # 获取面中的点
    cell_points[cell_id].extend(faces[face_id])

# 去重并计算中心
cell_centers = []
for cell_id in sorted(cell_points.keys()):
    pts = np.unique(cell_points[cell_id])  # 去重
    center = np.mean(points[pts], axis=0)  # 几何平均
    cell_centers.append(center)

cell_centers = np.array(cell_centers)
cell_centers = cell_centers[:, :2]
print("Cell centers shape:", cell_centers.shape)

query_points = cell_centers

sdf = compute_signed_sdf(
    wall_points[:, :2],  # 使用二维投影
    wall_normals[:, :2],
    query_points
)

x = query_points[:, 0]  # X 坐标
y = query_points[:, 1]  # Y 坐标
sdf_values = sdf  # 每个点的 Signed Distance 值

sc = plt.scatter(x, y, c=sdf_values, cmap="coolwarm", s=5)
plt.colorbar(sc, label="Signed Distance")  # 添加颜色条
plt.axis("equal")
plt.title("Colored Scatter Plot by SDF Value")
plt.show()

