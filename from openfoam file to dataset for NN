import os
import numpy as np
import pyvista as pv
from pyvista import CellType
import re
import matplotlib.pyplot as plt
import scipy.spatial
from pathlib import Path
from pyvista import UnstructuredGrid
import pandas as pd

def read_openfoam_mesh(case_path):
    """读取 OpenFOAM 网格的点和单元信息"""
    polyMesh_path = os.path.join(case_path, "constant/polyMesh")

    # 读取点坐标
    points = []
    with open(os.path.join(polyMesh_path, "points"), "r") as f:
        lines = f.readlines()
        start = lines.index("(\n") + 1
        end = lines.index(")\n", start)
        for line in lines[start:end]:
            coords = line.strip().strip("()").split()
            # 将二维坐标扩展为三维 (x, y, 0)
            points.append([float(coords[0]), float(coords[1]), 0.0])
    points = np.array(points, dtype=np.float32)

    # 读取面连接性
    faces = []
    with open(os.path.join(polyMesh_path, "faces"), "r") as f:
        lines = f.readlines()
        start = lines.index("(\n") + 1
        end = lines.index(")\n", start)
        face_str = "".join(lines[start:end]).replace("\n", "")
        for face in face_str.split(")")[:-1]:
            n_pts = int(face.split("(")[0])
            pts = list(map(int, face.split("(")[1].split()))
            faces.append(pts)  # 存储面的点索引

    # 读取单元-面关系 (owner)
    owner = []
    with open(os.path.join(polyMesh_path, "owner"), "r") as f:
        lines = f.readlines()
        start = lines.index("(\n") + 1
        end = lines.index(")\n", start)
        owner = [int(line.strip()) for line in lines[start:end]]

    # 构建单元连接性
    cells = []
    cell_types = []
    i = 0
    for cell_id in range(max(owner) + 1):  # 单元索引从 0 开始
        i += 1
        print('cell = ', i)
        # 找到属于当前单元的所有面
        cell_faces = [face for face_idx, face in enumerate(faces) if owner[face_idx] == cell_id]

        # 合并面的点索引（去重）
        cell_points = list(set([pt for face in cell_faces for pt in face]))

        # 存储单元连接性（VTK 格式: [顶点数, 点索引1, 点索引2, ...]）
        cells.append([len(cell_points)] + cell_points)
        cell_types.append(CellType.POLYGON)
    return points, cells, cell_types
def read_openfoam_mesh_2(case_path,boundary_name):
    """
    读取 OpenFOAM 网格的点和单元信息
    """
    polyMesh_path = os.path.join(case_path, "constant/polyMesh")
    #blade_boundary = os.path.join(case_path, "constant/polyMesh/boundary")

    # 读取点坐标
    points = []
    with open(os.path.join(polyMesh_path, "points"), "r") as f:
        lines = f.readlines()
        start = lines.index("(\n") + 1
        end = lines.index(")\n", start)
        for line in lines[start:end]:
            coords = line.strip().strip("()").split()
            points.append([float(c) for c in coords])  # 三维坐标 (x, y, z)
    points = np.array(points, dtype=np.float32)

    # 读取面连接性
    faces = []
    with open(os.path.join(polyMesh_path, "faces"), "r") as f:
        lines = f.readlines()
        start = lines.index("(\n") + 1
        end = lines.index(")\n", start)
        face_str = "".join(lines[start:end]).replace("\n", "")
        for face in face_str.split(")")[:-1]:
            n_pts = int(face.split("(")[0])
            pts = list(map(int, face.split("(")[1].split()))
            faces.append(pts)  # 存储面的点索引

    # 读取单元-面关系 (owner)
    owner = []
    with open(os.path.join(polyMesh_path, "owner"), "r") as f:
        lines = f.readlines()
        start = lines.index("(\n") + 1
        end = lines.index(")\n", start)
        owner = [int(line.strip()) for line in lines[start:end]]

    neighbour = []
    with open(os.path.join(polyMesh_path, "neighbour"), "r") as f:
        lines = f.readlines()
        start = lines.index("(\n") + 1
        end = lines.index(")\n", start)
        neighbour = [int(line.strip()) for line in lines[start:end]]

    """
        增强版：支持 OpenFOAM 多格式 boundary 文件解析
    """

    try:
        with open(os.path.join(polyMesh_path, "boundary"), "r") as f:
            content = f.read()

        # 正则匹配目标 patch 块
        pattern = re.compile(
            rf"{re.escape(boundary_name)}\s*"  # 匹配 patch 名称（允许名称含特殊字符）
            r"\{\s*"
            r"(.*?)\s*"  # 捕获块内内容（非贪婪）
            r"(?=\n\w+\s*{{|\Z)",  # 前瞻终止条件
            re.DOTALL | re.IGNORECASE
        )

        # 查找目标 patch
        match = pattern.search(content)
        if not match:
            available = re.findall(r"(\w+)\s*{", content)
            raise ValueError(f"找不到 Patch '{boundary_name}', 可用 Patches: {available}")

        # 提取关键字段
        block = match.group(1)
        start_face = re.search(r"startFace\s+(\d+)\s*;", block)
        n_faces = re.search(r"nFaces\s+(\d+)\s*;", block)

        if not start_face or not n_faces:
            missing = []
            if not start_face: missing.append("startFace")
            if not n_faces: missing.append("nFaces")
            raise ValueError(f"Patch '{boundary_name}' 缺失字段: {missing}")

        #return {
        #    "startFace": int(start_face.group(1)),
        #    "nFaces": int(n_faces.group(1))
        #}

    except FileNotFoundError:
        raise FileNotFoundError(f"文件不存在: {file}")
    except Exception as e:
        raise RuntimeError(f"解析错误: {str(e)}")



    return points, faces, owner, neighbour,{
            "startFace": int(start_face.group(1)),
            "nFaces": int(n_faces.group(1))
        }
def extract_aerofoil_surface(points,faces,start_face, n_faces , owner, boundary_name="BLADE"):
    """
    提取翼型表面（边界）的几何信息
    """

    aerofoil_faces = range(start_face, start_face + n_faces)

    # 提取翼型表面的点和单元信息
    aerofoil_points = set()
    aerofoil_cells = []
    for face_idx in aerofoil_faces:
        face = faces[face_idx]
        aerofoil_points.update(face)
        aerofoil_cells.append([len(face)] + face)

    # 构建点索引映射
    point_map = {pt: i for i, pt in enumerate(aerofoil_points)}
    aerofoil_points = np.array([points[pt] for pt in aerofoil_points])

    # 更新单元连接性
    aerofoil_cells = [[cell[0]] + [point_map[pt] for pt in cell[1:]] for cell in aerofoil_cells]

    return aerofoil_points, aerofoil_cells
def generate_naca0012(num_points=100):
    """
    生成完整的 NACA0012 翼型
    :param num_points: 点的数量
    :return: 翼型的点坐标，形状为 (2 * num_points, 2)
    """
    # 生成上表面的点
    x_up = np.linspace(0, 1, num_points)
    y_up = 0.6 * (0.2969 * np.sqrt(x_up) - 0.1260 * x_up - 0.3516 * x_up ** 2 + 0.2843 * x_up ** 3 - 0.1015 * x_up ** 4)

    # 生成下表面的点（y 坐标取反）
    x_down = np.linspace(1, 0, num_points)  # 从 1 到 0 以确保顺序正确
    y_down = -0.6 * (0.2969 * np.sqrt(
        x_down) - 0.1260 * x_down - 0.3516 * x_down ** 2 + 0.2843 * x_down ** 3 - 0.1015 * x_down ** 4)

    # 组合上下表面的点
    x = np.concatenate((x_up, x_down))
    y = np.concatenate((y_up, y_down))

    return np.column_stack((x, y))
def process_face_data(start_face, num_faces, owner_data, neighbour_data, p_data, U_data, nut_data):
    """
    处理每个面对应的场变量数据并返回相应的场变量值
    :param start_face: 起始 face 索引
    :param num_faces: 要处理的 face 数量
    :param owner_data: owner 单元数据
    :param neighbour_data: 邻居单元数据
    :param p_data: p 场数据
    :param U_data: U 场数据
    :param nut_data: nut 场数据
    :return: 包含 p_values, U_values, nut_values 和邻居数据的元组
    """

    # 存储每个 face 对应的场变量数据
    p_values = []
    U_values = []
    nut_values = []

    # 存储邻居数据的列表（可选）
    neighbour_p_values = []
    neighbour_U_values = []
    neighbour_nut_values = []

    # 检查最大索引是否超过数据的有效范围
    max_face_idx = start_face + num_faces
    if max_face_idx > len(owner_data):
        raise IndexError(f"访问的 face 索引超出数据范围，max_face_idx = {max_face_idx}, 数据长度 = {len(owner_data)}")

    # 遍历每个 face 索引
    for face_idx in range(start_face, start_face + num_faces):
        try:
            # 检查索引是否有效
            if face_idx >= len(owner_data):
                print(f"警告: face {face_idx} 超出 owner_data 范围")
                continue

            # 获取该 face 对应的 owner 单元索引
            cell_idx = owner_data[face_idx]

            # 从各自的场变量数据中提取数据
            if cell_idx < len(p_data):
                p_values.append(p_data[cell_idx])
            else:
                print(f"警告: p_data 中没有找到单元 {cell_idx} 的数据")

            if cell_idx < len(U_data):
                U_values.append(U_data[cell_idx])
            else:
                print(f"警告: U_data 中没有找到单元 {cell_idx} 的数据")

            if cell_idx < len(nut_data):
                nut_values.append(nut_data[cell_idx])
            else:
                print(f"警告: nut_data 中没有找到单元 {cell_idx} 的数据")

            # 如果是内部面，也可以考虑 neighbour 单元
            if face_idx < len(neighbour_data):  # 确保是内部面
                neighbour_cell_idx = neighbour_data[face_idx]
                # 检查相邻单元索引的有效性
                if neighbour_cell_idx < len(p_data):
                    neighbour_p_values.append(p_data[neighbour_cell_idx])
                else:
                    print(f"警告: neighbour p_data 中没有找到相邻单元 {neighbour_cell_idx} 的数据")

                if neighbour_cell_idx < len(U_data):
                    neighbour_U_values.append(U_data[neighbour_cell_idx])
                else:
                    print(f"警告: neighbour U_data 中没有找到相邻单元 {neighbour_cell_idx} 的数据")

                if neighbour_cell_idx < len(nut_data):
                    neighbour_nut_values.append(nut_data[neighbour_cell_idx])
                else:
                    print(f"警告: neighbour nut_data 中没有找到相邻单元 {neighbour_cell_idx} 的数据")

        except IndexError as e:
            print(f"Error accessing data for cell {cell_idx} at face {face_idx}: {e}")

    # 将结果转换为 NumPy 数组（如果需要的话）
    p_values = np.array(p_values)
    U_values = np.array(U_values)
    nut_values = np.array(nut_values)

    # 如果你想把邻居数据也转换为 NumPy 数组
    neighbour_p_values = np.array(neighbour_p_values)
    neighbour_U_values = np.array(neighbour_U_values)
    neighbour_nut_values = np.array(neighbour_nut_values)

    # 返回处理后的结果
    return p_values, U_values, nut_values
def calculate_face_length(aerofoil_cells, aerofoil_points):
    """
    计算二维翼型在三维网格中的每个面（cell）的边长之和
    :param aerofoil_cells: 面单元的点索引集合
    :param aerofoil_points: 点坐标数组，每个点是一个三维坐标 (x, y, z)
    :return: 每个面（cell）的总长度
    """
    face_lengths = []

    # 遍历每个面
    for cell in aerofoil_cells:
        # 假设每个 cell 是一个多边形，cell 是一个包含点索引的列表
        cell_points = np.array([aerofoil_points[pt_idx] for pt_idx in cell])  # 提取每个面上的点坐标

        # 初始化当前面（cell）的总长度
        total_length = 0.0

        # 计算每条边的长度（每两个相邻的点之间的距离）
        num_points = len(cell_points)
        for i in range(num_points):
            # 计算当前边与下一个边（循环回到起点）
            point1 = cell_points[i]
            point2 = cell_points[(i + 1) % num_points]
            edge_length = np.linalg.norm(point2 - point1)  # 计算欧几里得距离
            total_length += edge_length

        # 将该面的总长度添加到列表中
        face_lengths.append(total_length)

    return face_lengths
def calculate_triangle_normal(v0, v1, v2):
    e1 = v1 - v0
    e2 = v2 - v0
    n = np.cross(e1, e2)
    norm = np.linalg.norm(n)  # 新增：计算法向量长度
    if norm < 1e-10:  # 新增：检查法向量长度是否接近于零
        return np.array([0.0, 0.0, 0.0])  # 新增：返回零向量
    n_normalized = n / norm
    return n_normalized
def calculate_quad_normal(v0, v1, v2, v3):
    n1 = calculate_triangle_normal(v0, v1, v2)
    n2 = calculate_triangle_normal(v0, v2, v3)
    n_avg = (n1 + n2) / 2
    norm = np.linalg.norm(n_avg)  # 新增：计算法向量长度
    if norm < 1e-10:  # 新增：检查法向量长度是否接近于零
        return np.array([0.0, 0.0, 0.0])  # 新增：返回零向量
    n_avg_normalized = n_avg / norm
    return n_avg_normalized
def calculate_face_normals(cell_airfoil, point_airfoil):
    """
    计算翼型表面每个单元的法向量
    :param cell_airfoil: 翼型表面的单元列表，每个单元由四个点的索引组成，形状为 (N, 4) 的列表或数组
    :param point_airfoil: 翼型表面的点坐标，形状为 (M, 3) 的 numpy 数组
    :return: 每个单元的法向量，形状为 (N, 3) 的 numpy 数组
    """
    face_normals = []
    for cell in cell_airfoil:
        # 获取四个顶点的坐标
        v0 = point_airfoil[cell[0]]
        v1 = point_airfoil[cell[1]]
        v2 = point_airfoil[cell[2]]
        v3 = point_airfoil[cell[3]]
        # 计算法向量
        normal = calculate_quad_normal(v0, v1, v2, v3)
        face_normals.append(normal)
    return np.array(face_normals)
def cell_data_to_point_data(cell_data, cell_connectivity, num_points):
    """
    将 Cell Data 转换为 Point Data
    :param cell_data: 每个单元的标量或向量值，形状为 (N,) 或 (N, D)
    :param cell_connectivity: 每个单元的顶点索引，形状为 (N, K)
    :param num_points: 点的总数
    :return: 每个点的标量或向量值，形状为 (M,) 或 (M, D)
    """
    # 初始化 Point Data
    if cell_data.ndim == 1:  # 标量数据
        point_data = np.zeros(num_points)
    else:  # 向量数据
        point_data = np.zeros((num_points, cell_data.shape[1]))

    # 初始化计数器，记录每个点被多少单元共享
    point_counter = np.zeros(num_points)

    # 遍历所有单元
    for i, cell in enumerate(cell_connectivity):
        for point_index in cell:
            point_data[point_index] += cell_data[i]  # 累加 Cell Data
            point_counter[point_index] += 1  # 更新计数器

    # 计算平均值
    point_data /= point_counter[:, np.newaxis] if cell_data.ndim > 1 else point_counter

    return point_data
def create_vtp_file(case_path, time_dir, output_path, boundary_name="BLADE"):
    """
    创建包含翼型信息的 VTP 文件
    """
    '''
    setep one:读取网格数据
    '''

    points, faces, owner, neighbour, boundary = read_openfoam_mesh_2(case_path, boundary_name)
    startFace = boundary["startFace"]
    nFaces = boundary["nFaces"]
    aerofoil_points, aerofoil_cells = extract_aerofoil_surface(points, faces, startFace, nFaces, owner, boundary_name="BLADE")



    '''
    setep two  读取网格中的数据,计算 lengths 和  normals
    '''

    nut, p, U = read_field_data(case_path, time_dir)
    lengths = calculate_face_length(aerofoil_cells, aerofoil_points)
    normals = calculate_face_normals(aerofoil_cells, aerofoil_points)

    '''
    step three:  建立翼型网格文件
    '''
    aerofoil = pv.PolyData(aerofoil_points, aerofoil_cells)


    '''
    setep four: 处理每个面对应的场变量数据并返回相应的场变量值
    '''
    p, U, nut = process_face_data(startFace, nFaces, owner, neighbour, p, U, nut)

    '''
    setep five: 将 cell 数据加入网格
    '''
    aerofoil.cell_data["nut"] = nut
    aerofoil.cell_data["p"] = p
    aerofoil.cell_data["U"] = U
    aerofoil.cell_data["lengths"] = lengths
    aerofoil.cell_data["Normals"] = normals

    '''
    setep six: 将 cell 数据插值到  point 数据
    '''
    nut_point = cell_data_to_point_data(nut, aerofoil_cells, len(aerofoil_points))
    p_point = cell_data_to_point_data(p, aerofoil_cells, len(aerofoil_points))
    U_point = cell_data_to_point_data(U, aerofoil_cells, len(aerofoil_points))
    normals = cell_data_to_point_data(normals, aerofoil_cells, len(aerofoil_points))

    '''
    setep seven: 将 point 数据加入到网格中
    '''
    aerofoil.point_data["nut"] = nut_point
    aerofoil.point_data["p"] = p_point
    aerofoil.point_data["U"] = U_point
    aerofoil.point_data["normals"] = normals

    '''
    setep eight: 将 time 场加入到网格中
    '''
    time_value = float(time_dir)
    aerofoil.field_data["TimeValue"] = [time_value]

    print(f"VTP 文件已保存至: {output_path}")

    '''
    setep nine: 生成 vtp 文件
    '''
    aerofoil.save(output_path)
def read_vector_field(case_path,time_dir, field_name):
    """
    读取 OpenFOAM 矢量场（volVectorField）的 internalField 数据
    返回形状为 (N_cells, 3) 的二维数组
    """
    field_path = os.path.join(case_path, time_dir, field_name)

    #ield_path = "/Users/southfox/Computation/openfoam/1.18e5/20000/U"

    with open(field_path, "r") as f:
        lines = f.readlines()

        # 定位数据起始位置
        start = None
        for i, line in enumerate(lines):
            if "internalField" in line and "nonuniform" in line:
                start = i + 2  # 跳过行如 '29808('
                break

        if start is None:
            raise ValueError("未找到 internalField 数据")

        # 提取所有矢量数据
        vectors = []
        for line in lines[start:]:
            line = line.strip()
            if line == ")":  # 数据结束
                break
            # 解析格式如 "(-29.5711 -29.4823 4.5193e-25)"
            components = line.strip("()").split()
            vectors.append([float(c) for c in components])
    vectors = np.array([row for row in vectors if len(row) > 0])
    return np.array(vectors)

def read_vector_field_test(cas_path,time_dir, field_name):
    """
    读取 OpenFOAM 矢量场（volVectorField）的 internalField 数据
    返回形状为 (N_cells, 3) 的二维数组
    """
    field_path = os.path.join(case_path, time_dir, field_name)
    print('field_path = ', field_path)



    with open(field_path, "r") as f:
        lines = f.readlines()

        # 定位数据起始位置
        start = None
        for i, line in enumerate(lines):
            if "internalField" in line and "nonuniform" in line:
                start = i + 2  # 跳过行如 '29808('
                break

        if start is None:
            raise ValueError("未找到 internalField 数据")

        # 提取所有矢量数据
        vectors = []
        for line in lines[start:]:
            line = line.strip()
            if line == ")":  # 数据结束
                break
            # 解析格式如 "(-29.5711 -29.4823 4.5193e-25)"
            components = line.strip("()").split()
            vectors.append([float(c) for c in components])

        vectors = np.array([row for row in vectors if len(row) > 0])

    return np.array(vectors)

def read_scalar_field(time_dir, field_name):
    """
    读取 OpenFOAM 标量场（volScalarField）的 internalField 数据
    返回形状为 (N_cells,) 的一维数组
    """
    case_path = "/Users/southfox/Computation/openfoam/1.18e5/20000/p"
    field_path = case_path  # 假设直接读取 p 文件

    with open(field_path, "r") as f:
        lines = f.readlines()

        # 定位数据起始位置
        start = None
        for i, line in enumerate(lines):
            if "internalField" in line and "nonuniform" in line:
                # 数据格式示例：
                # internalField nonuniform List<scalar>
                # 29808
                # (
                # 值1
                # 值2
                # ...
                # )
                start = i + 3  # 跳过 internalField 行、数据总数行和 '(' 行
                break

        if start is None:
            raise ValueError("未找到 internalField 数据")

        # 提取标量数据
        values = []
        for line in lines[start:]:
            line = line.strip()
            if line == ")":  # 数据结束
                break
            if line.startswith("//") or line == "(" or line == ")":
                continue  # 跳过注释和括号
            try:
                values.append(float(line))
            except ValueError:
                print(f"警告：无法转换行数据为浮点数: {line}")
                continue

        # 验证数据完整性
        declared_count = int(lines[i+1].strip())  # 文件声明的数据总数
        if len(values) != declared_count:
            raise ValueError(
                f"数据不完整: 文件声明 {declared_count} 个值，实际解析 {len(values)} 个值"
            )

    return np.array(values)
def read_field_data(case_path, time_dir):

    U_cell = read_vector_field(case_path,time_dir, "U")
    U = np.array([row for row in U_cell if len(row) > 0])

    """读取场数据（标量和矢量）"""
    # 标量场 (nut, p)
    nut = read_scalar_field(time_dir, "nut")
    p = read_scalar_field(time_dir, "p")
    print("U_cell",U[0:5])
    print("nut_cell", nut[0:5])
    print("p_cell", p[0:5])
    return nut, p, U
def read_points(file):
    """
    修复版本：支持 OpenFOAM 多格式 points 文件
    """
    try:
        with open(file, "r") as f:
            content = f.read()

        # 匹配所有浮点数字符（支持科学计数法）
        points = re.findall(
            r"\(?\s*([-+]?\d+\.?\d*([eE][-+]?\d+)?)\s+"
            r"([-+]?\d+\.?\d*([eE][-+]?\d+)?)\s+"
            r"([-+]?\d+\.?\d*([eE][-+]?\d+)?)\s*\)?",
            content
        )

        # 提取有效坐标
        clean_points = []
        for match in points:
            x, y, z = match[0], match[2], match[4]
            clean_points.append([float(x), float(y), float(z)])

        if not clean_points:
            raise ValueError("未找到有效坐标点")

        return np.array(clean_points)

    except FileNotFoundError:
        raise FileNotFoundError(f"文件不存在: {file}")
    except Exception as e:
        raise RuntimeError(f"解析错误: {str(e)}")
def read_faces(file):
    """
    改进版本：支持 OpenFOAM 多格式面文件解析
    """
    try:
        with open(file, "r") as f:
            content = f.read()

        # 使用正则匹配所有面定义（兼容多种格式）
        face_pattern = re.compile(
            r"\b(\d+)\s*\(\s*((?:\d+\s+)*\d+)\s*\)",  # 匹配 "n(v0 v1 ... vn)"
            re.MULTILINE
        )

        # 提取所有匹配的面数据
        matches = face_pattern.findall(content)
        if not matches:
            raise ValueError("未找到有效的面数据")

        # 解析面数据
        faces = []
        for match in matches:
            n_vertices = int(match[0])  # 顶点数量（实际可能不需要）
            indices = list(map(int, match[1].split()))

            # 验证顶点数量一致性（可选）
            if len(indices) != n_vertices:
                raise ValueError(f"顶点数量声明不一致: 声明{n_vertices} 实际{len(indices)}")

            faces.append(indices)

        return faces

    except FileNotFoundError:
        raise FileNotFoundError(f"文件不存在: {file}")
    except Exception as e:
        raise RuntimeError(f"解析错误: {str(e)}")
def read_boundary(file, patch_name="BLADE"):
    """
    增强版：支持 OpenFOAM 多格式 boundary 文件解析
    """
    try:
        with open(file, "r") as f:
            content = f.read()

        # 正则匹配目标 patch 块
        pattern = re.compile(
            rf"{re.escape(patch_name)}\s*"  # 匹配 patch 名称（允许名称含特殊字符）
            r"\{\s*"
            r"(.*?)\s*"                     # 捕获块内内容（非贪婪）
            r"(?=\n\w+\s*{{|\Z)",            # 前瞻终止条件
            re.DOTALL | re.IGNORECASE
        )

        # 查找目标 patch
        match = pattern.search(content)
        if not match:
            available = re.findall(r"(\w+)\s*{", content)
            raise ValueError(f"找不到 Patch '{patch_name}', 可用 Patches: {available}")

        # 提取关键字段
        block = match.group(1)
        start_face = re.search(r"startFace\s+(\d+)\s*;", block)
        n_faces = re.search(r"nFaces\s+(\d+)\s*;", block)

        if not start_face or not n_faces:
            missing = []
            if not start_face: missing.append("startFace")
            if not n_faces: missing.append("nFaces")
            raise ValueError(f"Patch '{patch_name}' 缺失字段: {missing}")

        return {
            "startFace": int(start_face.group(1)),
            "nFaces": int(n_faces.group(1))
        }

    except FileNotFoundError:
        raise FileNotFoundError(f"文件不存在: {file}")
    except Exception as e:
        raise RuntimeError(f"解析错误: {str(e)}")
def extract_wall_patch(points, xfaces, wall_startFace, wall_nFaces):
    """提取壁面相关点及原始索引（带完整参数校验）"""

    # ----------------------------
    # 参数有效性校验
    # ----------------------------
    # 校验输入数据类型
    if not isinstance(xfaces, (list, np.ndarray)):
        raise TypeError(f"xfaces 应为 list 或 numpy.ndarray 类型，当前类型为 {type(xfaces)}")

    # 校验非负索引和正数面数
    if wall_startFace < 0:
        raise ValueError(f"起始面索引不能为负数，当前值为 {wall_startFace}")
    if wall_nFaces <= 0:
        raise ValueError(f"面数量必须为正整数，当前值为 {wall_nFaces}")

    # 校验面数据范围
    total_faces = len(xfaces)
    if total_faces == 0:
        raise ValueError("输入面数据为空")
    if (wall_startFace + wall_nFaces) > total_faces:
        raise ValueError(
            f"面切片范围越界: 起始面={wall_startFace}, 请求面数={wall_nFaces}, "
            f"总面数={total_faces}"
        )

    # ----------------------------
    # 面数据提取
    # ----------------------------
    wall_faces = xfaces[wall_startFace: wall_startFace + wall_nFaces]

    # ----------------------------
    # 顶点索引有效性验证
    # ----------------------------
    wall_indices = set()
    max_point_idx = len(points) - 1  # 最大有效索引

    for face in wall_faces:
        # 校验面的结构
        if len(face) < 3:
            raise ValueError(f"检测到非多边形面，顶点数不足3个: {face}")

        # 校验顶点索引范围
        for idx in face:
            if not (0 <= idx <= max_point_idx):
                raise IndexError(
                    f"发现无效顶点索引 {idx}，点数组长度仅为 {len(points)} "
                    f"(有效索引范围: 0-{max_point_idx})"
                )
        wall_indices.update(face)

    # ----------------------------
    # 数据提取与格式化
    # ----------------------------
    sorted_indices = sorted(wall_indices)

    try:
        # 高效处理 numpy 数组
        if isinstance(points, np.ndarray):
            wall_points = points[sorted_indices]
        # 兼容列表或其他可迭代类型
        else:
            wall_points = np.array([points[i] for i in sorted_indices])
    except IndexError as e:
        raise RuntimeError("点坐标提取失败，请确保 points 与索引一致性") from e

    return wall_points, np.array(sorted_indices)
def compute_face_normals(points, faces):
    """ 计算所有面的法向量（支持任意多边形面，修正方向指向外部） """
    normals = np.zeros((len(points), 3))
    count = np.zeros(len(points))

    for face in faces:
        if len(face) < 3:
            continue

        # 将面分解为三角形扇形
        p0 = np.array(points[face[0]])
        for i in range(2, len(face)):
            p1 = np.array(points[face[i - 1]])
            p2 = np.array(points[face[i]])

            # 计算法向量（修正方向：叉乘顺序改为 vec2 × vec1）
            vec1 = p1 - p0
            vec2 = p2 - p0
            normal = np.cross(vec2, vec1)  # 关键修改：交换叉乘顺序

            norm = np.linalg.norm(normal)
            if norm < 1e-10:
                continue

            normal /= norm

            # 累加到顶点
            for idx in [face[0], face[i - 1], face[i]]:
                if idx >= len(points):
                    raise IndexError(f"无效顶点索引 {idx}，总点数 {len(points)}")
                normals[idx] += normal
                count[idx] += 1

    # 归一化
    valid = count > 0
    normals[valid] /= np.linalg.norm(normals[valid], axis=1, keepdims=True)
    return normals
def compute_signed_sdf(wall_points, wall_normals, query_points):
    """ 向量化 SDF 计算（符号方向已修正） """
    tree = scipy.spatial.KDTree(wall_points)
    distances, nearest_idx = tree.query(query_points)

    vectors = query_points - wall_points[nearest_idx]
    dot_prods = np.einsum('ij,ij->i', vectors, wall_normals[nearest_idx])

    # 确保符号约定：外部为正，内部为负
    return distances * np.sign(dot_prods)
def sdf(point, faces, boundary):
    points = read_points(blade_points)
    faces = read_faces(blade_faces)
    boundary = read_boundary(blade_boundary, patch_name="BLADE")
    startFace = boundary["startFace"]
    nFaces = boundary["nFaces"]
    wall_points, wall_indices = extract_wall_patch(points=points, xfaces=faces, wall_startFace=startFace,
                                                   wall_nFaces=nFaces)
    wall_normals = compute_face_normals(points, faces)[wall_indices]
    query_points = points[:, 0:2]
    return compute_signed_sdf(wall_points[:, :2], wall_normals[:, :2], query_points)
def create_vtu_file(case_path, time_dir, output_path):
    """创建包含指定数据的 VTU 文件"""
    # 读取网格
    points, cells, cell_types = read_openfoam_mesh(case_path)

    # 创建 PyVista 非结构化网格（使用三维点坐标）
    grid = pv.UnstructuredGrid(cells, cell_types, points)  # 使用三维点坐标

    # 读取场数据（单元中心数据）
    nut_cell, p_cell, U_cell = read_field_data(case_path, time_dir)

    # ----------------------------
    # 添加单元数据 (Cell Data)
    # ----------------------------
    grid.cell_data["nut"] = nut_cell
    grid.cell_data["p"] = p_cell
    grid.cell_data["U"] = U_cell
    grid.cell_data["cell_ids"] = np.arange(grid.n_cells)
    grid.cell_data["vtkOriginalCellIds"] = np.arange(grid.n_cells)

    # ----------------------------
    # 添加点数据 (Point Data)
    # ----------------------------
    # 假设 implicit_distance 已预计算（示例中生成随机值）
    # 将单元数据插值到点数据
    grid_with_point_data = grid.cell_data_to_point_data()

    # 将插值后的点数据添加到原始网格
    grid.point_data["nut"] = grid_with_point_data["nut"]
    grid.point_data["p"] = grid_with_point_data["p"]
    grid.point_data["U"] = grid_with_point_data["U"]


    grid.point_data["implicit_distance"] = sdf

    grid.point_data["vtkOriginalPointIds"] = np.arange(grid.n_points)

    # ----------------------------
    # 添加场数据 (Field Data)
    # ----------------------------
    time_value = float(time_dir)  # 时间步目录名即为时间值
    grid.field_data["TimeValue"] = [time_value]

    # 保存为 VTU 文件
    grid.save(output_path)
def save_sdf_to_csv(sdf, output_file):
    """
    将 SDF 数据保存为 CSV 文件。
    """

    output_file = 'sdf_data.csv'
    np.savetxt(output_file, sdf, delimiter=',', fmt='%.6f')
    print(f"SDF 数据已保存到 {sdf_data.csv}")
def load_sdf_from_csv(filename):
    """
    从 CSV 文件加载 SDF 数据。
    file_path = 'sdf_data.csv'  # 替换为你的 CSV 文件路径
    """

    sdf = np.loadtxt(filename, delimiter=',')
    return sdf


boundary_name = "BLADE"
case_path = "/Users/southfox/Computation/openfoam/1.18e5"
polyMesh_path = os.path.join(case_path, "constant/polyMesh")
blade_points = os.path.join(polyMesh_path, "points")
blade_faces = os.path.join(polyMesh_path, "faces")
blade_boundary = os.path.join(polyMesh_path, "boundary")
time_dir = "20000"
output_path_vtu = "aerofoil.vtu"
output_path_vtp = "aerofoil_surface.vtp"
filename = 'sdf_data.csv'


if os.path.exists(filename):
    #如果文件存在，直接加载
    sdf_data = load_sdf_from_csv(filename)
    print('hello in exist')
else:
    # 如果文件不存在，调用 sdf() 生成数据并保存
    sdf = sdf(blade_points, blade_faces, blade_boundary)
    save_sdf_to_csv(sdf, filename)
    print('not exist')

create_vtu_file(case_path, time_dir, output_path_vtu)
print(f"VTU 文件已保存至: {output_path_vtu}")
openfoam_vtu = pv.read(output_path_vtu)
print('======================================================')

print("openfoam_vtu Point Data Keys:", openfoam_vtu.point_data.keys())
print("openfoam_vtu Cell Data Keys:", openfoam_vtu.cell_data.keys())
print("openfoam_vtu Field Data Keys:", openfoam_vtu.field_data.keys())
print(" ======  begin vtp ===========")
create_vtp_file(case_path, time_dir, output_path_vtp, boundary_name)
print('=========== 检查生成的 vtp 文件的 data_keys ========================')
aerofoil = pv.read("aerofoil_surface.vtp")
print("aerofoil:", aerofoil.point_data.keys())
print("aerofoil:", aerofoil.cell_data.keys())
print("aerofoil:", aerofoil.field_data.keys())




'''
def read_vector_field(time_dir, field_name):
    """
    读取 OpenFOAM 矢量场（volVectorField）的 internalField 数据
    返回形状为 (N_cells, 3) 的二维数组
    """
    #field_path = os.path.join(case_path, time_dir, field_name)

    field_path = "/Users/southfox/Computation/openfoam/1.18e5/20000/U"

    with open(field_path, "r") as f:
        lines = f.readlines()

        # 定位数据起始位置
        start = None
        for i, line in enumerate(lines):
            if "internalField" in line and "nonuniform" in line:
                start = i + 2  # 跳过行如 '29808('
                break

        if start is None:
            raise ValueError("未找到 internalField 数据")

        # 提取所有矢量数据
        vectors = []
        for line in lines[start:]:
            line = line.strip()
            if line == ")":  # 数据结束
                break
            # 解析格式如 "(-29.5711 -29.4823 4.5193e-25)"
            components = line.strip("()").split()
            vectors.append([float(c) for c in components])
    return np.array(vectors)
def read_scalar_field(time_dir, field_name):
    """
    读取 OpenFOAM 标量场（volScalarField）的 internalField 数据
    返回形状为 (N_cells,) 的一维数组
    """
    case_path = "/Users/southfox/Computation/openfoam/1.18e5/20000/p"
    field_path = case_path  # 假设直接读取 p 文件

    with open(field_path, "r") as f:
        lines = f.readlines()

        # 定位数据起始位置
        start = None
        for i, line in enumerate(lines):
            if "internalField" in line and "nonuniform" in line:
                # 数据格式示例：
                # internalField nonuniform List<scalar>
                # 29808
                # (
                # 值1
                # 值2
                # ...
                # )
                start = i + 3  # 跳过 internalField 行、数据总数行和 '(' 行
                break

        if start is None:
            raise ValueError("未找到 internalField 数据")

        # 提取标量数据
        values = []
        for line in lines[start:]:
            line = line.strip()
            if line == ")":  # 数据结束
                break
            if line.startswith("//") or line == "(" or line == ")":
                continue  # 跳过注释和括号
            try:
                values.append(float(line))
            except ValueError:
                print(f"警告：无法转换行数据为浮点数: {line}")
                continue

        # 验证数据完整性
        declared_count = int(lines[i+1].strip())  # 文件声明的数据总数
        if len(values) != declared_count:
            raise ValueError(
                f"数据不完整: 文件声明 {declared_count} 个值，实际解析 {len(values)} 个值"
            )

    return np.array(values)
def read_field_data(case_path, time_dir):
    U_cell = read_vector_field(time_dir, "U")
    U = np.array([row for row in U_cell if len(row) > 0])

    """读取场数据（标量和矢量）"""
    # 标量场 (nut, p)
    nut = read_scalar_field(time_dir, "nut")
    p = read_scalar_field(time_dir, "p")
    return nut, p, U
'''
'''
sc = plt.scatter(x, y, c=sdf_values, cmap="coolwarm", s=5)
plt.colorbar(sc, label="Signed Distance")  # 添加颜色条
plt.axis("equal")
plt.title("Colored Scatter Plot by SDF Value")
plt.show()
'''
